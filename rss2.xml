<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小子有出息</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>人生昧旅，砥砺而行</description>
    <pubDate>Thu, 25 May 2023 00:51:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数据结构</title>
      <link>http://example.com/2023/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <guid>http://example.com/2023/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <pubDate>Thu, 25 May 2023 00:35:13 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">算法 + 数据结构 = 程序</span><br></pre></td></tr></table></figure><h1 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h1><p>1️⃣数据结构<br>数据结构是指相互之间存在一种或多种特定关系的数据元素的集合，是计算机存储、组织数据的方式。再简单描述一下：数据结构就是描述对象间逻辑关系的学科。8 种常用数据结构：数组、<a href="https://www.jianshu.com/p/3aa144ac4c3b">链表</a>、栈、队列、图、<a href="https://www.jianshu.com/p/b597aa97c9de">树</a>、前缀树、<a href="https://blog.csdn.net/ChineseSoftware/article/details/117046998?spm=1001.2014.3001.5501">哈希表</a>。</p><p>2️⃣数据存储结构<br>简单的讲就是数据在计算机中的存储方式。常用的数据存储方式有两种：顺序存储，非顺序存储。顺序存储就是把数据存储在一块连续的存储介质(硬盘或内存等)中，反之就是非顺序存储。Java 中的数组就是典型的顺序存储，链表就是非顺序存储。数组存储数据时会开辟出一块连续内存，按顺序存储。链表则是只需要知道下一个节点存储的位置，就能把所有的数据连起来了。所以单向链表的最后一个节点是指向 Null 的。</p><h1 id="二、数组-Array"><a href="#二、数组-Array" class="headerlink" title="二、数组(Array)"></a>二、数组(Array)</h1><p>数组是数据结构中最简单，也是最常用的结构，很多编程语言都内置数组。其他数据结构，比如栈和队列都是由数组衍生出来的。下图展示了 1 个数组，它有 4 个元素。每一个数组元素的位置由数字编号，称为下标或者索引(index)。大多数编程语言的数组第一个元素的下标是 0。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/20943d05b4e76a7e44aab517063ad3ce.png" alt="img"></p><p>根据维度区分，有两种不同的数组：</p><p>1️⃣一维数组(如上图所示)<br>2️⃣多维数组(数组的元素为数组)</p><p>在 Java 中当创建数组时会在内存中划分出一块连续的内存，然后当有数据进入的时候会将数据按顺序的存储在这块连续的内存中。当需要读取数组中的数据时，需要提供数组中的索引，然后数组根据索引将内存中的数据取出来，返回给读取程序。在Java中并不是所有的数据都能存储到数组中，只有相同类型的数据才可以一起存储到数组中。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/3322e6f9ecae09bcb4a71a7865db5ac4.png" alt="img"></p><p>所有的数据结构都支持几个基本操作：读取Get、插入Insert、删除Delete。</p><p>因为数组在存储数据时是按顺序存储的，存储数据的内存也是连续的，所以它的特点就是寻址读取数据比较容易，插入和删除比较困难。在读取数据时，只需要告诉数组要从哪个位置(索引)取数据就可以了，数组会直接把想要的位置的数据取出来。插入和删除比较困难是因为这些存储数据的内存是连续的，要插入和删除就需要变更整个数组中的数据的位置。举个例子：一个数组中编号0-&gt;1-&gt;2-&gt;3-&gt;4这五个内存地址中都存了数组的数据，现在需要往4中插入一个数据，那就代表着从4开始，后面的所有内存中的数据都要往后移一个位置，相当耗时。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/f6ae1c03f195fbe7fa0493d5575d2f46.png" alt="img"></p><h1 id="三、链表-Linked-List-线性结构"><a href="#三、链表-Linked-List-线性结构" class="headerlink" title="三、链表(Linked List)线性结构"></a>三、链表(Linked List)线性结构</h1><p>链表与数组看起来非常像，但是内存分配方式、内部结构和插入删除操作方式都不一样。链表是一系列节点组成的链，每一个节点保存了数据以及指向下一个节点的指针。链表头指针指向第一个节点，如果链表为空，则头指针为空或者为 null。链表可以用来实现文件系统、哈希表和邻接表。</p><p>在 Java 中创建链表的过程和创建数组的过程不同，不会先划出一块连续的内存。因为链表中的数据并不是连续的，链表在存储数据的内存中有两块区域，一块区域用来存储数据，一块区域用来记录下一个数据保存在哪里(指向下一个数据的指针)。当有数据进入链表时候，会根据指针找到下一个存储数据的位置，然后把数据保存起来，然后再指向下一个存储数据的位置。这样链表就把一些碎片空间利用起来了，虽然链表是线性表，但是并不会按线性的顺序存储数据。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/9934f96665a90bb21682e40f238c53ce.png" alt="img"></p><p>由于链表是以这种方式保存数据，所以链表在插入和删除时比较容易，读取数据时比较麻烦。举个例子：一个链表中0-&gt;1-&gt;2-&gt;3-&gt;4这五个内存地址中都存了数据，现在需要往2中插入一条数据，那么只需要更改1号和2号中记录下一个数据的位置就行了，对其他数据没有影响。删除一条数据与插入类似，很高效。但是如果是想要在链表其中取出一条数据，就需要从0号开始一个一个的找，直到找到想要的那条数据为止。</p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/ebf9608a832871443668674c462cd4df.png" alt="链表中插入数据"></p><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/f88d739e247fb434e0f9d86892d5626f.png" alt="链表中删除数据"></p><p>链表分为 2 种：</p><ul><li>单向链表</li><li>双向链表</li></ul><p><strong>链表的基本操作</strong></p><ul><li>InsertAtEnd — 在链表结尾插入元素</li><li>InsertAtHead — 在链表开头插入元素</li><li>Delete — 删除链表的指定元素</li><li>DeleteAtHead — 删除链表第一个元素</li><li>Search — 在链表中查询指定元素</li><li>isEmpty — 查询链表是否为空</li></ul><h1 id="四、栈-stack-LIFO"><a href="#四、栈-stack-LIFO" class="headerlink" title="四、栈(stack) LIFO"></a>四、栈(stack) LIFO</h1><p>栈是一种先进后出的数据结构，数组和链表都可以生成栈。当数据进入到栈时会按照规则压入到栈的底部，再次进入的数据会压在前一次的数据上面，以此类推。在取出栈中的数据的时候会先取出最上面的数据，所以是先进后出。<br><img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/fcff4899650de4a7ad61ba4ce4cf6e58.png" alt="img"></p><p>由于数组和链表都可以组成栈，所以操作特点就需要看栈是由数组还是链表生成的了，然后就会继承相应的操作特点。最常见的操作撤回(Ctrl+Z)，就是利用栈实现的。原理：把之前的应用状态(限制个数)保存到内存中，最近的状态放到第一个。</p><p><strong>栈的基本操作</strong></p><ul><li>Push — 在栈的最上方插入元素</li><li>Pop — 返回栈最上方的元素，并将其删除</li><li>isEmpty — 查询栈是否为空</li><li>Top — 返回栈最上方的元素，并不删除</li></ul><h1 id="五、队列-Queue-FIFO"><a href="#五、队列-Queue-FIFO" class="headerlink" title="五、队列(Queue) FIFO"></a>五、队列(Queue) FIFO</h1><p>队列与栈类似，都是采用线性结构存储数据。它们的区别在于，栈采用 LIFO 方式，而队列采用先进先出，即 FIFO(First in First Out)。数组和链表也都可以生成队列。当数据进入到队列中时也是先进入的在下面后进入的在上面，但是出队列的时候是先从下面出，然后才是上面的数据出，最晚进入的队列的，最后出。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/86cbd80eb9063675fe5dad85f9441949.png" alt="img"></p><p>举个简单的例子：可以把栈和队列看成是两根管子，这两根管子是用来存储数据的，有可能是数组生成的也有可能是链表生成的，栈的这根管子有一头是封死的，所以像这个管子放数据只能从一个口进，拿出数据的时候也只能从这一个口拿出来。而队列这根管子呢两个口都是敞开的，一个口负责进数据，另一个口负责出数据，所以从一进口先进去的数据，在出口处会先被拿出来。</p><p><strong>队列的基本操作</strong></p><ul><li>Enqueue — 在队列末尾插入元素</li><li>Dequeue — 将队列第一个元素删除</li><li>isEmpty — 查询队列是否为空</li><li>Top — 返回队列的第一个元素</li></ul><h1 id="六、图-graph"><a href="#六、图-graph" class="headerlink" title="六、图(graph)"></a>六、图(graph)</h1><p>图由多个节点(vertex)构成，节点之间阔以互相连接组成一个网络。(x, y)表示一条边(edge)，它表示节点 x 与 y 相连。边可能会有权值(weight&#x2F;cost)。<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/7194111aeb0dcda9b656ec5fc8778792.png" alt="img"></p><p>图分为两种:</p><ul><li>无向图</li><li>有向图</li></ul><p>在编程语言中，图有可能有以下两种形式表示：</p><ul><li>邻接矩阵(Adjacency Matrix)</li><li>邻接表(Adjacency List)</li></ul><p>遍历图有两周算法</p><ul><li>广度优先搜索(Breadth First Search)</li><li>深度优先搜索(Depth First Search)</li></ul><h1 id="七、树-Tree"><a href="#七、树-Tree" class="headerlink" title="七、树(Tree)"></a>七、树(Tree)</h1><p>树是一个分层的数据结构，由节点和连接节点的边组成。树是一种特殊的图，它与图最大的区别是没有循环。树被广泛应用在人工智能和一些复杂算法中，用来提供高效的存储结构。下图是一个简单的树以及与树相关的术语：<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/12f7c9865c45adea766198e88adfff38.png" alt="img"></p><p>树有很多分类：</p><ul><li>N 叉树(N-ary Tree)</li><li>平衡树(Balanced Tree)</li><li>二叉树(Binary Tree)</li><li>二叉查找树(Binary Search Tree)</li><li>平衡二叉树(AVL Tree)</li><li>红黑树(Red Black Tree)</li><li>2-3 树(2–3 Tree)</li></ul><p>其中，二叉树和二叉查找树是最常用的树。</p><h1 id="八、前缀树"><a href="#八、前缀树" class="headerlink" title="八、前缀树"></a>八、前缀树</h1><p>前缀树(Prefix Trees 或者 Trie)与树类似，用于处理字符串相关的问题时非常高效。它可以实现快速检索，常用于字典中的单词查询，搜索引擎的自动补全甚至 IP 路由。下图展示了“top”, “thus”和“their”三个单词在前缀树中如何存储的：<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/ce56c31d1ceafa91a39b7dc25436bcdb.png" alt="img"></p><p>单词是按照字母从上往下存储，“p”, “s”和“r”节点分别表示“top”, “thus”和“their”的单词结尾。</p><h1 id="九、哈希表-Hash"><a href="#九、哈希表-Hash" class="headerlink" title="九、哈希表(Hash)"></a>九、哈希表(Hash)</h1><p>哈希将某个对象变换为唯一标识符，该标识符通常用一个短的随机字母和数字组成的字符串来代表。哈希可以用来实现各种数据结构，其中最常用的就是哈希表(hash table)。哈希表通常由数组实现。哈希表的性能取决于 3 个指标：</p><ul><li>哈希函数</li><li>哈希表的大小</li><li>哈希冲突处理方式</li></ul><p>下图展示了有数组实现的哈希表，数组的下标即为哈希值，由哈希函数计算，作为哈希表的键(key)，而数组中保存的数据即为值(value)：<img src="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/img/dc4341088f77e4378ee43855ad8bd661.png" alt="img"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <category domain="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>http://example.com/2023/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>海量数据处理</title>
      <link>http://example.com/2023/05/24/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</link>
      <guid>http://example.com/2023/05/24/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</guid>
      <pubDate>Wed, 24 May 2023 14:49:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;海量数据，是业务功能处理所涉及的数据量较大，不是指大数据的分析处理。&lt;br&gt;1：何谓海量数据&lt;br&gt;通俗地说，就是数据很多，数据量很大，记录数一般在千万级或者亿级甚至更多；存储在一个或多个服务器上；存储体量一般在TB级甚至PB级以上。&lt;br&gt;2：跟“大数据”的区别&lt;br&gt;“</description>
        
      
      
      
      <content:encoded><![CDATA[<p>海量数据，是业务功能处理所涉及的数据量较大，不是指大数据的分析处理。<br>1：何谓海量数据<br>通俗地说，就是数据很多，数据量很大，记录数一般在千万级或者亿级甚至更多；存储在一个或多个服务器上；存储体量一般在TB级甚至PB级以上。<br>2：跟“大数据”的区别<br>“大数据”通常指的是对海量数据进行分析和挖掘，发掘出数据中蕴含的有意义的东西，比如：规律、趋势、喜好等等，并能据此做出一定的推理和预测，通常会涉及数据仓库、数据挖掘、人工智能等方面的东西。<br>这个是我们所说的大数据技术、大数据开发、大数据系统。</p><p>海量数据的处理思路<br>核心思想：分而治之——拆分数据。<br>就是尽量让每次请求处理，所要操作的数据量变小。</p><p>基本的方法有这么几种：<br>1：数据库优化<br>比如：建立索引、 使用视图、优化SQL 等等。<br>2：垂直分库分表<br>如果说一次业务操作涉及到多张表，或者是单表的某些属性的时候，可以考虑垂直分库分表。<br>比如按业务分成商品库、用户库、订单库、库存库等等的。用户库还可以进一步划分成用户基本信息库、用户扩展信息库、用户积分等级库等等的。<br>3：水平分库分表<br>这个主要就是水平分表，本质上是数据分片。<br>把数据量过大的单表，根据一定的业务规则，拆分成多个表，每个表里面的数据就降下来了。<br>比如本来有1个亿的数据，现在拆分成了20张表，每张表大概也就是500万数据了。<br>也就是一次业务操作，可能需要操作的数据量也就降下来了。<br>4：合理使用缓存<br>一般情况下，只要不涉及到数据的修改，应该尽量从缓存系统去获取数据。这能大大减轻数据库的压力，对于提高系统的性能有很大的帮助。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%9D%A2%E8%AF%95/">面试</category>
      
      
      <category domain="http://example.com/tags/SQL%EF%BC%8C%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/">SQL，性能优化</category>
      
      
      <comments>http://example.com/2023/05/24/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSharp多线程</title>
      <link>http://example.com/2023/05/18/CSharp%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <guid>http://example.com/2023/05/18/CSharp%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <pubDate>Thu, 18 May 2023 04:08:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;1 进程、线程、同步、异步的概念&lt;br&gt;2 回顾委托，开始异步&lt;br&gt;3 异步多线程的三大特点&lt;/p&gt;
&lt;p&gt;进程：程序在服务器上运行时，占据的计算资源合集(内存，CPU，状态等)，称之为进程。进程之间不会相互干扰–进程间的通信会比较困难(用分布式实现)&lt;/p&gt;
&lt;p&gt;线程</description>
        
      
      
      
      <content:encoded><![CDATA[<p>1 进程、线程、同步、异步的概念<br>2 回顾委托，开始异步<br>3 异步多线程的三大特点</p><p>进程：程序在服务器上运行时，占据的计算资源合集(内存，CPU，状态等)，称之为进程。进程之间不会相互干扰–进程间的通信会比较困难(用分布式实现)</p><p>线程：程序执行的最小单位，即响应操作的最小执行流。线程也包含自己的计算资源，线程依托于进程，一个进程可以有多个线程。</p><p>多线程：一个进程里有多个线程并发执行。多线程是Thread类，就是一个封装类，是.Net Framework对线程对象的抽象封装。通过Thread去完成的操作，最终是通过向操作系统请求得到的执行流。</p><p>CurrentThread：当前线程——任何操作执行都是线程完成的，运行当前这句话的线程<br>ManagedThread:是.Net平台给Thread起的名字，就是个int值，尽量不重复</p><p>同步单线程方法：按顺序执行，每次调用完成后才能执行下一行，是同一个线程运行的<br>异步多线程方法：</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C/">C#</category>
      
      
      <category domain="http://example.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/">知识点</category>
      
      
      <comments>http://example.com/2023/05/18/CSharp%E5%A4%9A%E7%BA%BF%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何理解自己内心</title>
      <link>http://example.com/2023/05/16/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%87%AA%E5%B7%B1%E5%86%85%E5%BF%83/</link>
      <guid>http://example.com/2023/05/16/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%87%AA%E5%B7%B1%E5%86%85%E5%BF%83/</guid>
      <pubDate>Tue, 16 May 2023 03:42:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;问你一个有点沉重的问题，你会讨厌自己吗？有没有什么时刻，你对自己的选择或者行为感到极度的厌恶或者失望，有没有什么事情让你在处理时感到纠结于困惑？比如说你明明有些涉恐，喜欢独处，却又想结交朋友，想和他人建立连接。你自己不喜欢出头，总是倾向于让他人里，但又对听命于他人感到厌恶，</description>
        
      
      
      
      <content:encoded><![CDATA[<p>问你一个有点沉重的问题，你会讨厌自己吗？有没有什么时刻，你对自己的选择或者行为感到极度的厌恶或者失望，有没有什么事情让你在处理时感到纠结于困惑？比如说你明明有些涉恐，喜欢独处，却又想结交朋友，想和他人建立连接。你自己不喜欢出头，总是倾向于让他人里，但又对听命于他人感到厌恶，你想在职场或者班级里与人为善。但内心又觉得自己是在讨好，迎合他人，于是你的行为变得脚柔躁，作。当伴侣或者朋友获得其他的事业成功时，你会为他们感到高兴，同时也会心生嫉妒。这样的例子不胜枚举。有时候，这些矛盾纠结的心理活动会让我们身心疲惫。明明一天也没做什么事，但就是感觉很疲惫，提不起生活的性质。如果你也有类似的状况，这本卡伦霍尼的我们内心的冲突或许可以帮助到你。提到心理学。如果让你说出第一时间想到的人物，很多人可能都会说弗洛伊德。就算你不知道他，你也一定听过类似的心理治疗故事，比如一个大学学生非常害怕当众演讲，哪怕听众只有几个人，<br>他也会紧张到无法开口。于是他找到心理医生，想治好自己紧张的问题。心理医生一番化疗之后，了解到他很小的时候，曾经被爸妈强行拉到众多亲戚面前表演唱歌。由于她害羞，他没唱出来，就被亲戚们笑话了。母亲觉得孩子让自己丢了面子，非常生气，于是事后严厉责骂了他。从此他就特别害怕在别人面前进行任何表演，心里一生指出，就是这件事让他在后来一直惧怕眼角，在意识到自己的童年经历才是恐惧的根源之后，这位学生就开始变得越来越勇敢了。<br>这就是比较典型的弗罗伊德精神分析法，而霍尼对此有不一样的看法，他认为，童年经历虽然说，但对我们的人生影响应该另当别论。如果精神分析不是首先教我们现在面的的困难与过去的经历联系起来，而是依赖于理解我们现有人格内部各种力量的相互作用，那么，患者便可以在不依靠或者轻微依靠专家指导的情况下，做到自我认知与改变。这便是本书的写作由来。也就是说，面的心理问题，霍尼更倾向于从自身当下去深入分析，而不是过度依赖于过去的经历。<br>他认为，如果把问题都归结于童年，便忽视了人当下的主观能动性。那么下面我就和大家聊聊，霍尼是如何帮助我们理解内心冲突的？首先，霍尼指出，我们内心的各种纠结，冲突是由人际关系占的障碍引起的。要理心冲突。我们得先了解冲突的三个基本元素，也就是我们处理人际关系的三种倾向，分别是亲近他人，对抗他人，疏远他人，正常人这三种倾向都会有，并且可以根据具体的情况在这三者之间自由切换。但我们亲近他人时，我们会承认自身的无助。<br>即使我们与与他人关系疏远，心怀恐惧，我们仍然会努力争取他人的好感，以寻求依靠。我们在与他人共处的过程中感受到了安全。我们通过顺从他人来获取归属感，被支持感，从而让自身觉得自己不再那么孤单弱小。但我们对抗他人时，我们会认为周围充满敌意，并且有意识或无意识的决心对抗。我们此时呢内心不信任他人对自己的情感和意图，会不择手段的抗争。我们求强求胜，挫败他人，一方面是为了自保，另一方面也是为了报复。但我们疏远他人时，<br>我们既不寻求归属，也无心对抗，这想保持疏远。我们会觉得自己与他人没多少共同点。别人无法理解自己，于是我们倾向于把自己圈在自己的小世界里，用书本本电影，音乐，玩偶，或者是梦想将自己包围？如果你发现这三点都有些说中自己也很正常，就像前面说的，每个人都会有这三种倾向，但是有的人不能在这三种倾向之间自由切换，表现出了一种不自主的强迫性，比如强迫性的亲近他人，对应的就是驱从型人格，类似我们现在说的依赖性爱型人格，<br>或者讨好型人格，这类人对情感联系和他人的赞许表现出了非常明显的需求。他们总是需要有人喜欢，想被人接纳，受人欢迎。有人赞许，越是重要的人，又要离不开他，这样他才觉得自己对别人重要。当然，这类人会为自己辩护，谁不想被人喜欢，有归属感受到支持呢？这不是人的自然然需求吗？确实，但霍尼认为，他们的问题在于对亲近人有强迫性的需求。他们对别人示好，不是因为自己真的喜欢他人，而是为了获得能满足自己的回应，而屈从型的人，<br>往往拒绝承认或者意识不到这一点。这种对他人友好回应的强迫性需求，使得他们一直压抑自己的好胜心，害怕敌手与争吵，习惯性的自责，把矛头对准自己而废别人，他们不加区别地取悦别人，迎合他人，看似是为了寻求情感与赞许，而事实上，他们是跌入了急需安全感的无底洞。因为他们总是感觉自己无助弱小，需要他人的关爱与支持来获得安全感。于是，他们说服自己去讨好他人，并且让自己想想别人也都是以礼带人的。他们强烈期待他人会以同样的方式回应自己，<br>而当现实击碎期待时，他们不仅失望，伤心，还会进一步加深自己对这个世界的不安全感，而这份不安全感又会强化他们对他人支持的需要，这也是驱从型人格为什么容易吸渣的一个原因。强迫性的对抗他人，对应的是攻击型人格，类似我们现在说的偏执型人格障碍，自恋型人格障碍和反社会人格障碍，在他们眼里，世界就是斗兽场，弱肉强食，逝者生存，他们的驾值体系是围绕丛林法则展开的。他们认为所有人本质上都心怀敌意，那些人道主义慈悲心在他们看来都是惺惺做态，<br>他们习惯性地压抑自己的情感需求。他们坚信无情便是强大。不照顾他人的感受，便是真诚冷酷的追逐自己的目标就是现实，这一套逻辑有利于他们在现实中胜出。想一想所谓的成功人士。他们中很多人都是这样的状态，他们往往厌恶，承认自己有任何的恐惧，并且会采取极端的手段加以控制。比如越是怕黑，越是逼自己待在黑暗的房间，越是害怕演讲，越是逼自己第一个上台。他们还有很强的控制他人的欲望，要么正大光明的用权力施压，要么安装操控做幕后黑手。<br>他们渴望得到他人的认可，也因此热衷于追求出人头地，追求成功。与特权。和驱从者一样，虽然获得外界肯定的方式不同，但他们关注的重点都在自身之外。所以有时候他们也会困惑，为什么明明得到了成功，但自己的不安却并没有减少？他们对柔情的人态度复杂，一方面，他们鄙视别人柔情的性格。另一方面，他们也乐于看到这种性格的出现，因为就能让他让他更加自由自带地追求自己的目标。这就是为什么他们常常被驱从型的人吸引，强迫性的疏远他人对应的是孤僻性人格，<br>类似我们现在说的回避型人格障碍与分裂样人格障碍。每个人都会有想独处的时候，可能是为了理清思绪，为了自我放松，为了专注于某些工作而强迫性疏远他人的人。他们往往是为了逃避人际关系中难以忍受的压力才选择独处。他们对他人展现出了普遍疏远的倾向。他们很忌讳那种依赖他人，需要他人的感觉，害怕任何人或者事物对自己来说变得不可或缺。如果某种快乐必须有他人参与才能实现，那他就宁可放弃。他们可能会痛恨疾病，认为这是耻辱，<br>因为疾病迫使他们有求于人。他们希望自己能与他人保持安全距离，不希望被他人干扰，并且重视隐私，重视对自己的解释权。如果有人擅自给他们贴上标签，他们往往会非常生气，因为这让他们感觉到自己被践踏了，霍尼认为他们的问题在于将独立视为最终目的，而非手段，忽视了独立的价值，最终取决于他们独立的去做什么。以上就是内心冲突中三种基本元素的概述，但我们感觉纠结，陷入精神内耗时，往往就是有一种以上的元素在拉扯我们。比如，<br>当你非常喜欢的人总是不能及时回复你的消息时，你可能也会纠结要不要刻意延迟自己回复的速度。你总是揣测对方的态度，考虑自己的行为，使得和对方的交往变得非常消耗精力。这就是驱从型人格与孤僻型人格，再来回拉扯所导致的。一方面，你有亲近对方的欲望，希望获得对方的爱恋，所以你会去考虑怎么讨好对方。会习惯性的自信反思自己有没有做得不对的地方，但同时你也有疏远他人，保持自我的需求，你不希望让对方对自己来说变得不可或缺。<br>你不想让对方过度影响到自己的生活状态，于是冲突便产生了。又或者，当你受到父母，老师的批评时，你既希望自己能满足对方的期望，当一个受人喜欢的好孩子，好学生又会觉得对方是不是在针对自己有一种强烈的反驳欲望？如果你最后接受了批评，或者干脆选择反驳抗争就是采取了一种常见的处理冲突的方式，也就是压抑人格的某一方面，然后让其对立面成为主导。如果最终你既不愿意心服口服的接受批评，又没有勇气去做出反抗，那你往往会选择逃避，<br>会想把自己一个人关到房间里，或者从此彻底忽视父母，老师对自己的评价，这也是另一种我们在面对冲突时比较常见的处理手段，通过保持自身与他人的距离，来远离冲突。除此之外，还有一些我们不太能自我意识到的处理方式，比如理想化形象，塑造一个理想的自我形象，然后相信自己就是这样来获得内心的安慰。这个自我形象往往很大程度上偏离实际，比如驱从型的人会拒绝承认自己的讨好行为，本质上是为了获得安全感，他们理想化的自我是一个毫无私心，<br>待人真诚，不计回报的人。于是别人对他越差，他越要友好回应，容易陷入自我感动。你看，就算对方对我那么差，我还是这么爱她，我真是一个愿意为他人付出的好人啊。攻击型的人，无视自己的恐惧与脆弱，以此为耻，并加以掩饰。他们理想化的自我是一个能力过人，不被情感左右，能冷酷追逐成功的人。因此，他们总认为自己有资格的指责别人，习惯以现实主义自据。孤僻型的人不愿意看到自己清高独处的状态，并非自己的选择，而是无法处理好与他人的现实关系，<br>不得不与他人疏远导致的。他们理想化的自我是一个独一无二，主动选择独善其身的人。他们害怕认识到自己的现状其实是被被动的现实。当多个倾向发生冲突时，理想化形象也可以帮助整合冲突。比如，一个人明明情绪不稳定，喜怒无常，总是在讨好他人与攻击他人之间来回摇摆。而他会认为自己其实是一个爱憎分明，有处事原则的人或者一个人有明显的孤僻倾向，他习惯于逃避争斗，但同时，他也相信他丛林法则，想残酷的追求，自私自利，而他怯懦的性格使得这种攻击的倾向只有在极少数情况下才会爆发。<br>那么，在他的理想形象里，自己其实是一个隐居山顶的狼人，享有无边的智慧与宁静。少数情况下，他才会放下情感，尽情攻击。霍尼认为通过构建这些理想化形象，他们的得以逃避，面对现实自我的缺点与冲突，从而获得了一个良好的自我感觉这个理想化的自我可以帮他们削除虚弱感，带来优越感，霍尼指出理想化形象与追求理想是完全不同的两件事。后者具有能动性，可以激励人们追求理想，促使人们成长发展。而前者是禁止的，是人们为自己树立的固定形象，<br>对个人的成长只有阻碍作用。真正的理想让人谦虚，而理想化的形象让人自负，并且理想化的形象越是不切实际，当事人就越脆弱。越是渴望来自外部的肯定和认可，就像马男波杰克里的主角，明明是一个让人讨厌自私自理的混蛋，但他一直一直认为自己是一个受人欢迎的好人。当他看了自己的传记，发现现实与理想形象冲突时，他就立刻找到传记作者，希望对方能承认自己是个好人。一个人树立起自己理想化的形象，往往是因为他无法容忍自己真实的模样，<br>而这也就导致了一个严重的问题，就是对自我的梳理。他忘了了真正的自己，无法分辨出自己的真实感受与需求，也就无法决策。当事人会对生活失去兴趣，因为活着的已经不是他自己。还有一种常见的处理内心问题的手段是外化。有外化倾向的人。他们会把内在的心理活动当做某种外在经历的结果，总是认为自己内心的各种问题完全是由外部因素导致的。霍尼认为，当个人的理想形象与现实自我差距太大，当事人无法承受这其中的压迫感时，就会选择逃离自我。<br>他无法接受自己的某些性格或者情感缺点，于是干脆把这些问题的原因归结在他人身上，比如，明明是他自己过度自卑，他却说是别人鄙视他。明明是他自己总是怀疑别人，他却说是因为别人都想算计他。包括有一些人，一旦被指出自己的某些问题时，就会立马把问题和自己的童年联系起来。就像有的父母一旦被指责管教孩子的方式过于暴力时，他们就会立马理直其壮的回应，我从小就是这么被打大的呀，如果我们总是是像过往向童年探求原因，就会失去对当下内心力量探索的欲望。<br>当事人对自我的态度就像一个从山顶滚落的雪球，从被推下的那一刻开始，就只能不断滚落下去。他无法感受到自己主动积极的能动性，所以我们究竟如何应对内心的冲突呢？霍尼认为认如果采用弗罗伊德市的还原分析，让所有问题的答案都归结于童年，是远远不够的。这只能让当事人用一种更加宽容的态度面对自己，并不能解决根本性的问题。想要解决那些内心的冲突，必须改变那些促使冲突发生的基本条件，比如对自我与他人的疏远，内心的无助感，<br>敌对而紧张的人际关系等等。为了改变这些，我们首先要审视内心，分析自己的真实感受与需要，从自己的主导人格倾向，理想化形象，各种外化行为，这些角度来切入研究，霍尼在书中举例了大量的个人案例与表现形式，也正好方便我们对号入座，理解自己。然后，我们需要根据对自己的认知，建立自己稳定的价值观体系，这样在我们遇到冲突必须做出选择时，就可以有所依据，不必陷入精神内耗。最后，我们根据前面这两点，也就是在自我感受与价值观体系的基础上，<br>再去建立与他人的关系，就能在与人交往的过程中避免很多内心的冲突。此外，我我们还要尝试放弃自己盲目塑造的理想化形象，接纳真实的自我，一般个人需要具有足够的现实力量之后，才能容忍这一形象的崩塌。这个现实力量在我的理解里就是那些能让你感到自信，安全感的事物，比如他人的认可与关爱，对自我价值的肯定，对现实的清晰认知等等。而前面说过的那三个步骤，也有助于我们找到这种现实力量。最后，我们必须认识到，自己是如何在内心力量的驱使下，<br>按照各种强迫性倾向去行动的。这些行动无关自身愿望，也并非最有力的选择，而且往往削弱了我们生活的力量。我们需要找回对自己负责的能力，不加掩饰情感，真挚地去感受，工作、生活。或许你会说，这一切太理想化了。说起来容易做起来难，确实，清晰的认知自我本来就不是一件容易的事，更不用说改变自我了，但霍尼仍然坚信人格是可以改变的。不只有孩子的咳塑性强大人也一样，只要我们还活着，我们就有改变的能力，甚至可以做出根本性的改变。<br>就像霍尼在书中对绝望的观点一样，绝望并没有简单的解决办法。但只要我们不再觉得自己再劫难逃，转而开始将绝望视为最终可以解决的问题，这本身就是一种巨大的进步。同样的，或许我们在看完这本书，了解了自身的各种强迫性倾向之后，我们仍然无法解决掉所有内心的冲突，但至少可以摒弃掉那些糟糕的解决方案。用一种更加诚实的态度面对自己，能看到自我内心的冲突，这本身就已经是一种成长了。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%BF%83%E7%90%86%E5%AD%A6/">心理学</category>
      
      
      <category domain="http://example.com/tags/%E5%BF%83%E6%80%81/">心态</category>
      
      
      <comments>http://example.com/2023/05/16/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%87%AA%E5%B7%B1%E5%86%85%E5%BF%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>web3-builder</title>
      <link>http://example.com/2023/05/10/web3-builder/</link>
      <guid>http://example.com/2023/05/10/web3-builder/</guid>
      <pubDate>Tue, 09 May 2023 20:35:49 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;web3-builder是一个区块链应用开发框架,主要用于以太坊应用的快速开发。它提供了智能合约、前端组件和插件等工具,开发者可以简单配置和拼装,快速构建出一个web3应用。&lt;br&gt;web3-builder的主要功能包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;智能合约组件 - 包含E</description>
        
      
      
      
      <content:encoded><![CDATA[<p>web3-builder是一个区块链应用开发框架,主要用于以太坊应用的快速开发。它提供了智能合约、前端组件和插件等工具,开发者可以简单配置和拼装,快速构建出一个web3应用。<br>web3-builder的主要功能包括:</p><ol><li>智能合约组件 - 包含ERC20代币合约、Uniswap交易对合约、NFT市场合约等开源代码。开发者可以直接使用或定制这些组件,减少合约开发难度。</li><li>前端UI组件 - 提供区块链应用常用的UI组件,如钱包&#x2F;账号连接、交易表单、NFt展示卡片、分页组件等。这些组件简化了UI开发流程。</li><li>插件机制 - web3-builder支持插件扩展,开发者可以开发插件来添加更多功能。目前已有IPFS文件存储插件、TheGraph数据查询插件等。这有利于功能丰富和定制化。</li><li>模板应用 - web3-builder内置了一系列应用模板,如代币发行应用、NFT市场应用、众筹应用等。开发者可以基于这些模板快速构建一个最小可用的应用,然后进行扩展与定制。这进一步缩短了开发周期。</li><li>代码生成器 - web3-builder可以根据设置自动生成构成应用的各部分代码,如合约代码、部署脚本、前端调用代码等。这使得开发者无需完全手写所有的应用代码,大幅提高工作效率。 </li><li>在线编辑器 - web3-builder提供了一个 在线的开发者工作台,组件配置、代码查看与编辑都在工作台中进行。这简化了本地开发环境的搭建,更加轻量级。<br>所以,web3-builder是一个区块链应用开发全栈工具。通过组件化与模块化,它将区块链应用的开发过程进行分解和重组,以更加高效和系统化的方式应对不同开发任务。<br>对开发者来说,利用web3-builder可以快速掌握区块链应用开发的全过程,并在更短的周期内开发出一个真实可用的应用产品。这大大降低了开发难度和门槛。<br>当然,web3-builder也存在一定局限。对于功能更加复杂的应用,它的组件和生态可能无法完全覆盖。开发者还是需要进行较为深入的定制化开发。但作为入门工具,web3-builder无疑具有很高的学习和开发效率。<br>除web3-builder外,区块链应用开发领域还有其他优秀框架,如Truffle、Hardhat、Embark等。但web3-builder可能在易用性和全面性上更加突出。这为开发者选择更为合适的框架工具提供了参考。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%91%E6%99%AE/">科普</category>
      
      
      <comments>http://example.com/2023/05/10/web3-builder/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>币圈里的合约</title>
      <link>http://example.com/2023/05/10/%E5%B8%81%E5%9C%88%E9%87%8C%E7%9A%84%E5%90%88%E7%BA%A6/</link>
      <guid>http://example.com/2023/05/10/%E5%B8%81%E5%9C%88%E9%87%8C%E7%9A%84%E5%90%88%E7%BA%A6/</guid>
      <pubDate>Tue, 09 May 2023 20:34:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;“币圈合约”是指加密货币圈内的智能合约,主要在公链上运行。它利用区块链技术实现一定的编码与验证机制,能够进行自动化的交易、结算和资产管理。&lt;br&gt;与传统合同相比,币圈合约有以下主要优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非可变性 - 合约内容被编程为区块链上的代码,难以修改和篡改</description>
        
      
      
      
      <content:encoded><![CDATA[<p>“币圈合约”是指加密货币圈内的智能合约,主要在公链上运行。它利用区块链技术实现一定的编码与验证机制,能够进行自动化的交易、结算和资产管理。<br>与传统合同相比,币圈合约有以下主要优点:</p><ol><li>非可变性 - 合约内容被编程为区块链上的代码,难以修改和篡改。这确保了交易双方的权益不受非法变更的影响。</li><li>自动执行 - 合约中定义的约定与交易逻辑可以自动进行验证和结算。这减少了人为干预的空间,提高了效率与准确性。 </li><li>活期性 - 智能合约可以与区块链和加密货币深度结合,支持某些”活期”功能,如自动转账、分红等。这增加了合约的实用性。</li><li>低成本 - 区块链技术大幅降低了交易和管理成本。这也使得币圈合约可以以更低的成本使用和运行。</li><li>去中心化 - 智能合约运行在区块链网络上,无需中央机构参与。这保证了其运行在一个开放、透明而又安全的去中心化环境中。<br>目前,典型的”币圈合约”包括:</li><li>代币合约 - 为加密资产发行设定代币总量、增发规则等内容的程序合约。可以实现代币的自动化管理。</li><li>交易对合约 - 为加密资产交易指定交易规则、费率标准等内容的自动交易程序。能够进行资产的直接点对点交易。 </li><li>公募合约 - 为加密资产或项目的众筹设定认购规则与时间限制的自动化众筹程序。支持区块链资产的公开募资。</li><li>分红合约 - 为某些加密资产设定持币奖励及分红发放的自动计划。能定期自动向持币人支付分红与奖励。</li><li>借贷合约 - 为P2P借贷设定还款期限、利率规则与逾期处罚条款的自动化借贷程序。实现区块链资产借贷的无中介交易。<br>总之,”币圈合约”正在成为区块链与加密货币领域一个非常重要的技术与应用角色。它赋能了公链网络,实现资产的高效数字化管理与交易。未来,随着区块链技术的广泛应用,币圈合约也必将在更多场景中大放异彩,发挥其重要的作用。</li></ol><p>“币圈开放合约”指在公链(如以太坊)上编写和部署的开源智能合约。这些合约的源代码对所有人开放和透明。任何人都可以查看、使用、二次开发这些合约。<br>与普通的币圈合约相比,开放合约有以下主要特点:</p><ol><li>开源 - 合约的源代码对公众完全开放,所有人都可以阅读和审计。这增加了其透明度与可信度。</li><li>可复用 - 其他开发者可以直接使用或在现有合约的基础上进行改进和衍生。这提高了效率和降低了开发成本。</li><li>去中心化 - 由于代码开放,合约的运维和更新不依赖中心化团队。这保证其无单点故障和操控风险。 </li><li>社区驱动 - 开放合约可以由开发社区共同维护和改进。这体现了区块链的集体智慧,产出可能更加完善。</li><li>互操作性 - 不同合约之间可以实现互调用和连接,产生协同效应。这有利于构建一个开放的去中心化应用环境。<br>目前,一些典型的开放币圈合约包括:</li><li>ERC20代币标准 - 用于发行代币的开源合约标准,大多数代币项目均采用该标准。这确保了代币之间的互操作与兼容。</li><li>Uniswap交易对模板 - 用于添加交易对的开源合约代码,简化了交易对部署流程,降低了开发难度。</li><li>Compound协议 - 提供去中心化借贷服务的开源合约系统。任何人都可以基于该协议开发相关应用。</li><li>Aave借贷协议 - 另一个开源的去中心化借贷协议,也已有许多应用基于该协议开发。</li><li>Yearn Finance聚合协议 - 用于收益聚合的开放合约系统,开发者可以在其基础上开发更多应用,产生广泛影响。<br>所以,”币圈开放合约”是区块链开发者和社区共同编写、完善与运维的智能合约。通过开源共享,它们可以实现互操作与集成,被更广泛应用于去中心化金融等场景。这也是区块链技术标准化与开放性的重要体现。<br>随着区块链产业的发展,开放合约必将进一步丰富,并催生出更多跨链应用。它们构成了产业链上更为开放与互联的一部分,为创新与进步提供了可能。这也正是开放合约存在的价值所在。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%91%E6%99%AE/">科普</category>
      
      <category domain="http://example.com/tags/%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/">名词释义</category>
      
      
      <comments>http://example.com/2023/05/10/%E5%B8%81%E5%9C%88%E9%87%8C%E7%9A%84%E5%90%88%E7%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>央行</title>
      <link>http://example.com/2023/05/10/%E5%A4%AE%E8%A1%8C/</link>
      <guid>http://example.com/2023/05/10/%E5%A4%AE%E8%A1%8C/</guid>
      <pubDate>Tue, 09 May 2023 19:14:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;央行指的是中央银行,即各国的国家级银行。央行的主要功能是监管当地的货币流通和金融业。主要包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;货币政策和控制 - 央行控制货币供应量和利率,运用货币政策影响通货膨胀、经济增长和就业率等。这是央行最基本也是最重要的职能。&lt;/li&gt;
&lt;li&gt;发行货币</description>
        
      
      
      
      <content:encoded><![CDATA[<p>央行指的是中央银行,即各国的国家级银行。央行的主要功能是监管当地的货币流通和金融业。主要包括:</p><ol><li>货币政策和控制 - 央行控制货币供应量和利率,运用货币政策影响通货膨胀、经济增长和就业率等。这是央行最基本也是最重要的职能。</li><li>发行货币 - 央行负责印刷和发行各种面额的纸币和硬币,这些货币构成当地流通的主要支付手段。</li><li>金融监管 - 央行负责对商业银行和其他金融机构的活动进行监督,制定监管政策和规则,确保金融体系的稳定运行。</li><li>支付结算 - 央行运营国家的支付结算系统,处理商业银行间的资金划转与清算。这有助于提高金融体系的效率与安全性。</li><li>国际金融 - 央行还负责管理国际收支平衡、外汇储备、汇率等,并代表本地金融业在国际金融领域发言和交涉。</li><li>财政代理 - 某些国家的央行也作为政府的财政代理,帮助政府进行公债的发行与交易,为政府提供借款等。</li><li>金融稳定 - 央行负责预防和化解金融危机,采取适当措施确保金融体系的总体稳定。这是近年来央行的一个重要职能与使命。<br>所以,央行作为一个国家的最高货币当局,主要通过货币政策、监管手段、支付结算和国际合作等来促进价格稳定、经济增长、金融稳定与国际竞争力。这使其在一个国家的金融与经济体系中发挥举足轻重的作用。<br>各国央行在历史的演变中不断变化与发展,中央银行的表现在很大程度上代表一个国家货币金融体制的进步与成熟度。这也使得央行自身不断完善与跟随时代发展。</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/">名词释义</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%91%E6%99%AE/">科普</category>
      
      
      <comments>http://example.com/2023/05/10/%E5%A4%AE%E8%A1%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>什么是以太坊，以太坊可以干嘛</title>
      <link>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%A5%E5%A4%AA%E5%9D%8A%EF%BC%8C%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%8F%AF%E4%BB%A5%E5%B9%B2%E5%98%9B/</link>
      <guid>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%A5%E5%A4%AA%E5%9D%8A%EF%BC%8C%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%8F%AF%E4%BB%A5%E5%B9%B2%E5%98%9B/</guid>
      <pubDate>Tue, 09 May 2023 19:09:48 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;以太坊是目前最流行的区块链平台之一,它允许开发人员在上面开发和部署decentralized应用程序(DApps)。以太坊有几个主要功能:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;智能合约 - 以太坊允许在区块链上部署智能合约,这些智能合约是区块链上的应用程序。它们可以执行某些代码并返回</description>
        
      
      
      
      <content:encoded><![CDATA[<p>以太坊是目前最流行的区块链平台之一,它允许开发人员在上面开发和部署decentralized应用程序(DApps)。以太坊有几个主要功能:</p><ol><li>智能合约 - 以太坊允许在区块链上部署智能合约,这些智能合约是区块链上的应用程序。它们可以执行某些代码并返回数据。许多DApps都是由智能合约构建的。</li><li>代币 - 以太坊平台发行的以太币(ETH)是区块链上的加密货币,可以用于DApps内部的支付和交易。许多项目也会在以太坊上发行ERC20代币。</li><li>去中心化 - 以太坊是公开的、去中心化的区块链网络,没有单一实体控制它。这使其成为构建DApps的理想平台。</li><li>安全性 - 以太坊利用区块链技术来提供高度安全性。一旦数据写入区块链,它就很难被篡改。这保护了DApps的数据和资金安全。</li><li>开源 - 以太坊是开源的区块链项目,其全部代码都是对外透明和审查的。这使其可以由社区推动持续发展与扩展。<br>目前,已经有许多DApps在以太坊平台上运行,这些DApps覆盖了诸如金融、博彩、社交网络、存储等领域。一些例子包括:</li></ol><ul><li>MakerDAO - 提供稳定币和借贷服务</li><li>Compound - 去中心化借贷市场</li><li>Augur - 开源的预测市场应用</li><li>ENS - 以太网名称服务,用于解析人类可读名称到以太坊地址</li><li>many others…<br>总体来说,以太坊已经成为构建和运营去中心化应用的事实标准。基于其活跃的开发社区、成熟的技术框架和广泛的应用生态系统,以太坊无疑将在未来继续发挥关键作用,推动区块链技术和服务的发展与融入传统商业。</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%91%E6%99%AE/">科普</category>
      
      <category domain="http://example.com/tags/%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/">名词释义</category>
      
      
      <comments>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%A5%E5%A4%AA%E5%9D%8A%EF%BC%8C%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%8F%AF%E4%BB%A5%E5%B9%B2%E5%98%9B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>利用web3.0构建开放数据产品和服务</title>
      <link>http://example.com/2023/05/10/%E5%88%A9%E7%94%A8web3-0%E6%9E%84%E5%BB%BA%E5%BC%80%E6%94%BE%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81%E5%92%8C%E6%9C%8D%E5%8A%A1/</link>
      <guid>http://example.com/2023/05/10/%E5%88%A9%E7%94%A8web3-0%E6%9E%84%E5%BB%BA%E5%BC%80%E6%94%BE%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81%E5%92%8C%E6%9C%8D%E5%8A%A1/</guid>
      <pubDate>Tue, 09 May 2023 19:03:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;利用web3.0构建开放数据产品和服务的一般步骤如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择开放数据源。首先需要选择一套高质量的开放数据,这些数据需要以标准格式提供,且允许任意使用和分发。例如政府公开数据、区块链数据、社交网络数据等。&lt;/li&gt;
&lt;li&gt;分析数据并发现机会。对选定</description>
        
      
      
      
      <content:encoded><![CDATA[<p>利用web3.0构建开放数据产品和服务的一般步骤如下:</p><ol><li>选择开放数据源。首先需要选择一套高质量的开放数据,这些数据需要以标准格式提供,且允许任意使用和分发。例如政府公开数据、区块链数据、社交网络数据等。</li><li>分析数据并发现机会。对选定的数据集进行深入分析,发现可以利用这些数据创建的产品或服务。找出数据中的模式和趋势,以解决某个现实问题或满足某种需求。</li><li>架构数据和API。对原始数据进行清洗、整理和关联,构建出结构化的数据集和API接口。这使您的产品可以轻松访问和利用这些开放数据。</li><li>构建产品原型。利用步骤3中构建的API,开发一个产品雏形或demo来验证想法。这个原型应具有产品的核心功能,以便了解用户的反馈和需求,提高产品定制性。</li><li>吸引初期用户并迭代产品。发布产品雏形,吸引首批用户并收集反馈。根据用户反馈不断改进产品,增加新功能,使产品更加完善。这一迭代过程可以持续很长时间。</li><li>制定商业模式并付费。当产品功能趋于完备并具有一定用户量时,需要考虑具体的商业模式,如订阅、广告、高级版本等。这使产品最终可以产生收入和利润。<br>举例来说, hearsay社会是一个开放数据案例:</li></ol><ul><li>选择数据:Twitter历史推文档案,包含50亿条推文,时间跨度10年。</li><li>发现机会:利用这些数据来分析社会舆情、预测市场趋势,或为品牌提供消费者洞察。</li><li>架构API: hearsay社会整理了这些Twiter数据,并提供了方便访问的API接口。</li><li>制作原型:hearsay社会开发了一个网站和Demo,展示如何利用其API分析数据并获得洞察。</li><li>吸引用户:hearsay社会找到许多品牌客户,利用其数据分析服务来洞察消费者和预测趋势。</li><li>商业模式:hearsay社会采用订阅 modelo,客户需要付费使用其API和数据分析服务。<br>所以,利用web3.0开放数据构建产品和服务需要一个系统的流程,需要发现机会,构建API,开发原型,找到用户并制定商业模式。当然,这个过程需要有技巧,了解数据挖掘、人工智能等技术会有很大帮助。但开放数据资源的丰富为人们创造价值提供了源源不断的机会。</li></ul>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/05/10/%E5%88%A9%E7%94%A8web3-0%E6%9E%84%E5%BB%BA%E5%BC%80%E6%94%BE%E6%95%B0%E6%8D%AE%E4%BA%A7%E5%93%81%E5%92%8C%E6%9C%8D%E5%8A%A1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>什么是DApp</title>
      <link>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AFDApp/</link>
      <guid>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AFDApp/</guid>
      <pubDate>Tue, 09 May 2023 19:00:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;DApp是Decentralized Application的缩写,意为去中心化应用。它是运行在区块链网络上的应用程序,具有以下特征:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开源 - DApp的代码是开源的,任何人都可以审计代码和查找漏洞。&lt;/li&gt;
&lt;li&gt;自治 - DApp在区块链</description>
        
      
      
      
      <content:encoded><![CDATA[<p>DApp是Decentralized Application的缩写,意为去中心化应用。它是运行在区块链网络上的应用程序,具有以下特征:</p><ol><li>开源 - DApp的代码是开源的,任何人都可以审计代码和查找漏洞。</li><li>自治 - DApp在区块链上运行,没有单一实体可以控制它或关闭它。</li><li>分散 - DApp运行在分布式的P2P网络上,允许跨境和跨平台。</li><li>安全性 - DApp基于区块链搭建,可以利用区块链的安全性和抗审计性能。</li><li>透明度 - DApp的所有交易和数据都透明地记录在区块链上,可以被公众审计。<br>6.不可更改 - 一旦数据被记录在区块链上,就不能被更改,这保证了DApp的运行透明而可信。<br>DApp覆盖了许多领域,如金融、博彩、存储、交换等。一些为人所知的DApp例子有:</li></ol><ul><li>MakerDAO - 稳定币和借贷平台</li><li>Compound - 去中心化借贷市场</li><li>dYdX - 杠杆交易平台</li><li>Gods Unchained - 交易卡牌游戏</li><li>BitTorrent Token - 资助BT下载的代币经济模型<br>DApp代表了区块链技术的实际应用,是web3.0时代重要的技术基础。与传统应用相比,DApp可以提供去信任、透明、不可篡改等优点。但DApp也存在一定挑战,如可扩展性、易用性以及在法规方面的不确定性。<br>总体来说,DApp作为区块链技术在实际业务场景的具体实现,其发展速度体现了区块链应用落地的速度。未来,随着相关技术的进步与法规环境的逐渐明朗,DApp将在各行各业得到广泛应用,成为实现 DAO(去中心化自治组织)的重要基石。</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/">区块链</category>
      
      
      <category domain="http://example.com/tags/%E7%A7%91%E6%99%AE/">科普</category>
      
      <category domain="http://example.com/tags/%E5%90%8D%E8%AF%8D%E9%87%8A%E4%B9%89/">名词释义</category>
      
      
      <comments>http://example.com/2023/05/10/%E4%BB%80%E4%B9%88%E6%98%AFDApp/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
